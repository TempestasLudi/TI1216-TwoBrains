<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>TwoBrains API Reference</title>

    <link href="TwoBrains%20API%20Reference_files/screen.css" rel="stylesheet" type="text/css" media="screen">
    <link href="TwoBrains%20API%20Reference_files/print.css" rel="stylesheet" type="text/css" media="print">
    <script src="TwoBrains%20API%20Reference_files/jquery.js"></script>
      <script src="TwoBrains%20API%20Reference_files/all.js" type="text/javascript"></script>

      <script>
        $(function() {
          setupLanguages(["code"]);
        });
      </script>
  <style class="firebugResetStyles" type="text/css" charset="utf-8">/* See license.txt for terms of usage */
/** reset styling **/
.firebugResetStyles {
    z-index: 2147483646 !important;
    top: 0 !important;
    left: 0 !important;
    display: block !important;
    border: 0 none !important;
    margin: 0 !important;
    padding: 0 !important;
    outline: 0 !important;
    min-width: 0 !important;
    max-width: none !important;
    min-height: 0 !important;
    max-height: none !important;
    position: fixed !important;
    transform: rotate(0deg) !important;
    transform-origin: 50% 50% !important;
    border-radius: 0 !important;
    box-shadow: none !important;
    background: transparent none !important;
    pointer-events: none !important;
    white-space: normal !important;
}
style.firebugResetStyles {
    display: none !important;
}

.firebugBlockBackgroundColor {
    background-color: transparent !important;
}

.firebugResetStyles:before, .firebugResetStyles:after {
    content: "" !important;
}
/**actual styling to be modified by firebug theme**/
.firebugCanvas {
    display: none !important;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
.firebugLayoutBox {
    width: auto !important;
    position: static !important;
}

.firebugLayoutBoxOffset {
    opacity: 0.8 !important;
    position: fixed !important;
}

.firebugLayoutLine {
    opacity: 0.4 !important;
    background-color: #000000 !important;
}

.firebugLayoutLineLeft, .firebugLayoutLineRight {
    width: 1px !important;
    height: 100% !important;
}

.firebugLayoutLineTop, .firebugLayoutLineBottom {
    width: 100% !important;
    height: 1px !important;
}

.firebugLayoutLineTop {
    margin-top: -1px !important;
    border-top: 1px solid #999999 !important;
}

.firebugLayoutLineRight {
    border-right: 1px solid #999999 !important;
}

.firebugLayoutLineBottom {
    border-bottom: 1px solid #999999 !important;
}

.firebugLayoutLineLeft {
    margin-left: -1px !important;
    border-left: 1px solid #999999 !important;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
.firebugLayoutBoxParent {
    border-top: 0 none !important;
    border-right: 1px dashed #E00 !important;
    border-bottom: 1px dashed #E00 !important;
    border-left: 0 none !important;
    position: fixed !important;
    width: auto !important;
}

.firebugRuler{
    position: absolute !important;
}

.firebugRulerH {
    top: -15px !important;
    left: 0 !important;
    width: 100% !important;
    height: 14px !important;
    background: url("data:image/png,%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%13%88%00%00%00%0E%08%02%00%00%00L%25a%0A%00%00%00%04gAMA%00%00%D6%D8%D4OX2%00%00%00%19tEXtSoftware%00Adobe%20ImageReadyq%C9e%3C%00%00%04%F8IDATx%DA%EC%DD%D1n%E2%3A%00E%D1%80%F8%FF%EF%E2%AF2%95%D0D4%0E%C1%14%B0%8Fa-%E9%3E%CC%9C%87n%B9%81%A6W0%1C%A6i%9A%E7y%0As8%1CT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AATE9%FE%FCw%3E%9F%AF%2B%2F%BA%97%FDT%1D~K(%5C%9D%D5%EA%1B%5C%86%B5%A9%BDU%B5y%80%ED%AB*%03%FAV9%AB%E1%CEj%E7%82%EF%FB%18%BC%AEJ8%AB%FA'%D2%BEU9%D7U%ECc0%E1%A2r%5DynwVi%CFW%7F%BB%17%7Dy%EACU%CD%0E%F0%FA%3BX%FEbV%FEM%9B%2B%AD%BE%AA%E5%95v%AB%AA%E3E5%DCu%15rV9%07%B5%7F%B5w%FCm%BA%BE%AA%FBY%3D%14%F0%EE%C7%60%0EU%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5JU%88%D3%F5%1F%AE%DF%3B%1B%F2%3E%DAUCNa%F92%D02%AC%7Dm%F9%3A%D4%F2%8B6%AE*%BF%5C%C2Ym~9g5%D0Y%95%17%7C%C8c%B0%7C%18%26%9CU%CD%13i%F7%AA%90%B3Z%7D%95%B4%C7%60%E6E%B5%BC%05%B4%FBY%95U%9E%DB%FD%1C%FC%E0%9F%83%7F%BE%17%7DkjMU%E3%03%AC%7CWj%DF%83%9An%BCG%AE%F1%95%96yQ%0Dq%5Dy%00%3Et%B5'%FC6%5DS%95pV%95%01%81%FF'%07%00%00%00%00%00%00%00%00%00%F8x%C7%F0%BE%9COp%5D%C9%7C%AD%E7%E6%EBV%FB%1E%E0(%07%E5%AC%C6%3A%ABi%9C%8F%C6%0E9%AB%C0'%D2%8E%9F%F99%D0E%B5%99%14%F5%0D%CD%7F%24%C6%DEH%B8%E9rV%DFs%DB%D0%F7%00k%FE%1D%84%84%83J%B8%E3%BA%FB%EF%20%84%1C%D7%AD%B0%8E%D7U%C8Y%05%1E%D4t%EF%AD%95Q%BF8w%BF%E9%0A%BF%EB%03%00%00%00%00%00%00%00%00%00%B8vJ%8E%BB%F5%B1u%8Cx%80%E1o%5E%CA9%AB%CB%CB%8E%03%DF%1D%B7T%25%9C%D5(%EFJM8%AB%CC'%D2%B2*%A4s%E7c6%FB%3E%FA%A2%1E%80~%0E%3E%DA%10x%5D%95Uig%15u%15%ED%7C%14%B6%87%A1%3B%FCo8%A8%D8o%D3%ADO%01%EDx%83%1A~%1B%9FpP%A3%DC%C6'%9C%95gK%00%00%00%00%00%00%00%00%00%20%D9%C9%11%D0%C0%40%AF%3F%EE%EE%92%94%D6%16X%B5%BCMH%15%2F%BF%D4%A7%C87%F1%8E%F2%81%AE%AAvzr%DA2%ABV%17%7C%E63%83%E7I%DC%C6%0Bs%1B%EF6%1E%00%00%00%00%00%00%00%00%00%80cr%9CW%FF%7F%C6%01%0E%F1%CE%A5%84%B3%CA%BC%E0%CB%AA%84%CE%F9%BF)%EC%13%08WU%AE%AB%B1%AE%2BO%EC%8E%CBYe%FE%8CN%ABr%5Dy%60~%CFA%0D%F4%AE%D4%BE%C75%CA%EDVB%EA(%B7%F1%09g%E5%D9%12%00%00%00%00%00%00%00%00%00H%F6%EB%13S%E7y%5E%5E%FB%98%F0%22%D1%B2'%A7%F0%92%B1%BC%24z3%AC%7Dm%60%D5%92%B4%7CEUO%5E%F0%AA*%3BU%B9%AE%3E%A0j%94%07%A0%C7%A0%AB%FD%B5%3F%A0%F7%03T%3Dy%D7%F7%D6%D4%C0%AAU%D2%E6%DFt%3F%A8%CC%AA%F2%86%B9%D7%F5%1F%18%E6%01%F8%CC%D5%9E%F0%F3z%88%AA%90%EF%20%00%00%00%00%00%00%00%00%00%C0%A6%D3%EA%CFi%AFb%2C%7BB%0A%2B%C3%1A%D7%06V%D5%07%A8r%5D%3D%D9%A6%CAu%F5%25%CF%A2%99%97zNX%60%95%AB%5DUZ%D5%FBR%03%AB%1C%D4k%9F%3F%BB%5C%FF%81a%AE%AB'%7F%F3%EA%FE%F3z%94%AA%D8%DF%5B%01%00%00%00%00%00%00%00%00%00%8E%FB%F3%F2%B1%1B%8DWU%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*UiU%C7%BBe%E7%F3%B9%CB%AAJ%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5J%95*U%AAT%A9R%A5*%AAj%FD%C6%D4%5Eo%90%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5%86%AF%1B%9F%98%DA%EBm%BBV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%ADV%AB%D5j%B5Z%AD%D6%E4%F58%01%00%00%00%00%00%00%00%00%00%00%00%00%00%40%85%7F%02%0C%008%C2%D0H%16j%8FX%00%00%00%00IEND%AEB%60%82") repeat-x !important;
    border-top: 1px solid #BBBBBB !important;
    border-right: 1px dashed #BBBBBB !important;
    border-bottom: 1px solid #000000 !important;
}

.firebugRulerV {
    top: 0 !important;
    left: -15px !important;
    width: 14px !important;
    height: 100% !important;
    background: url("data:image/png,%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%0E%00%00%13%88%08%02%00%00%00%0E%F5%CB%10%00%00%00%04gAMA%00%00%D6%D8%D4OX2%00%00%00%19tEXtSoftware%00Adobe%20ImageReadyq%C9e%3C%00%00%06~IDATx%DA%EC%DD%D1v%A20%14%40Qt%F1%FF%FF%E4%97%D9%07%3BT%19%92%DC%40(%90%EEy%9A5%CB%B6%E8%F6%9Ac%A4%CC0%84%FF%DC%9E%CF%E7%E3%F1%88%DE4%F8%5D%C7%9F%2F%BA%DD%5E%7FI%7D%F18%DDn%BA%C5%FB%DF%97%BFk%F2%10%FF%FD%B4%F2M%A7%FB%FD%FD%B3%22%07p%8F%3F%AE%E3%F4S%8A%8F%40%EEq%9D%BE8D%F0%0EY%A1Uq%B7%EA%1F%81%88V%E8X%3F%B4%CEy%B7h%D1%A2E%EBohU%FC%D9%AF2fO%8BBeD%BE%F7X%0C%97%A4%D6b7%2Ck%A5%12%E3%9B%60v%B7r%C7%1AI%8C%BD%2B%23r%00c0%B2v%9B%AD%CA%26%0C%1Ek%05A%FD%93%D0%2B%A1u%8B%16-%95q%5Ce%DCSO%8E%E4M%23%8B%F7%C2%FE%40%BB%BD%8C%FC%8A%B5V%EBu%40%F9%3B%A72%FA%AE%8C%D4%01%CC%B5%DA%13%9CB%AB%E2I%18%24%B0n%A9%0CZ*Ce%9C%A22%8E%D8NJ%1E%EB%FF%8F%AE%CAP%19*%C3%BAEKe%AC%D1%AAX%8C*%DEH%8F%C5W%A1e%AD%D4%B7%5C%5B%19%C5%DB%0D%EF%9F%19%1D%7B%5E%86%BD%0C%95%A12%AC%5B*%83%96%CAP%19%F62T%86%CAP%19*%83%96%CA%B8Xe%BC%FE)T%19%A1%17xg%7F%DA%CBP%19*%C3%BA%A52T%86%CAP%19%F62T%86%CA%B0n%A9%0CZ%1DV%C6%3D%F3%FCH%DE%B4%B8~%7F%5CZc%F1%D6%1F%AF%84%F9%0F6%E6%EBVt9%0E~%BEr%AF%23%B0%97%A12T%86%CAP%19%B4T%86%CA%B8Re%D8%CBP%19*%C3%BA%A52huX%19%AE%CA%E5%BC%0C%7B%19*CeX%B7h%A9%0C%95%E1%BC%0C%7B%19*CeX%B7T%06%AD%CB%5E%95%2B%BF.%8F%C5%97%D5%E4%7B%EE%82%D6%FB%CF-%9C%FD%B9%CF%3By%7B%19%F62T%86%CA%B0n%D1R%19*%A3%D3%CA%B0%97%A12T%86uKe%D0%EA%B02*%3F1%99%5DB%2B%A4%B5%F8%3A%7C%BA%2B%8Co%7D%5C%EDe%A8%0C%95a%DDR%19%B4T%C66%82fA%B2%ED%DA%9FC%FC%17GZ%06%C9%E1%B3%E5%2C%1A%9FoiB%EB%96%CA%A0%D5qe4%7B%7D%FD%85%F7%5B%ED_%E0s%07%F0k%951%ECr%0D%B5C%D7-g%D1%A8%0C%EB%96%CA%A0%A52T%C6)*%C3%5E%86%CAP%19%D6-%95A%EB*%95q%F8%BB%E3%F9%AB%F6%E21%ACZ%B7%22%B7%9B%3F%02%85%CB%A2%5B%B7%BA%5E%B7%9C%97%E1%BC%0C%EB%16-%95%A12z%AC%0C%BFc%A22T%86uKe%D0%EA%B02V%DD%AD%8A%2B%8CWhe%5E%AF%CF%F5%3B%26%CE%CBh%5C%19%CE%CB%B0%F3%A4%095%A1%CAP%19*Ce%A8%0C%3BO*Ce%A8%0C%95%A12%3A%AD%8C%0A%82%7B%F0v%1F%2FD%A9%5B%9F%EE%EA%26%AF%03%CA%DF9%7B%19*Ce%A8%0C%95%A12T%86%CA%B8Ze%D8%CBP%19*Ce%A8%0C%95%D1ae%EC%F7%89I%E1%B4%D7M%D7P%8BjU%5C%BB%3E%F2%20%D8%CBP%19*Ce%A8%0C%95%A12T%C6%D5*%C3%5E%86%CAP%19*Ce%B4O%07%7B%F0W%7Bw%1C%7C%1A%8C%B3%3B%D1%EE%AA%5C%D6-%EBV%83%80%5E%D0%CA%10%5CU%2BD%E07YU%86%CAP%19*%E3%9A%95%91%D9%A0%C8%AD%5B%EDv%9E%82%FFKOee%E4%8FUe%A8%0C%95%A12T%C6%1F%A9%8C%C8%3D%5B%A5%15%FD%14%22r%E7B%9F%17l%F8%BF%ED%EAf%2B%7F%CF%ECe%D8%CBP%19*Ce%A8%0C%95%E1%93~%7B%19%F62T%86%CAP%19*Ce%A8%0C%E7%13%DA%CBP%19*Ce%A8%0CZf%8B%16-Z%B4h%D1R%19f%8B%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1%A2%A52%CC%16-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2EKe%98-Z%B4h%D1%A2EKe%D02%5B%B4h%D1%A2EKe%D02%5B%B4h%D1%A2E%8B%96%CA0%5B%B4h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%16-%95a%B6h%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-Z*%C3l%D1%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z%B4T%86%D9%A2E%8B%16-Z%B4T%06-%B3E%8B%16-Z%B4T%06-%B3E%8B%16-Z%B4h%A9%0C%B3E%8B%16-Z%B4h%A9%0CZf%8B%16-Z%B4h%A9%0CZf%8B%16-Z%B4h%D1R%19f%8B%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1%A2%A52%CC%16-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2EKe%98-Z%B4h%D1%A2EKe%D02%5B%B4h%D1%A2EKe%D02%5B%B4h%D1%A2E%8B%96%CA0%5B%B4h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%16-%95a%B6h%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-Z*%C3l%D1%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z%B4T%86%D9%A2E%8B%16-Z%B4T%06-%B3E%8B%16-Z%B4T%06-%B3E%8B%16-Z%B4h%A9%0C%B3E%8B%16-Z%B4h%A9%0CZf%8B%16-Z%B4h%A9%0CZf%8B%16-Z%B4h%D1R%19f%8B%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1R%19%B4%CC%16-Z%B4h%D1%A2%A52%CC%16-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2%A52h%99-Z%B4h%D1%A2EKe%98-Z%B4h%D1%A2EKe%D02%5B%B4h%D1%A2EKe%D02%5B%B4h%D1%A2E%8B%96%CA0%5B%B4h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%96%CA%A0e%B6h%D1%A2E%8B%16-%95a%B6h%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-%95A%CBl%D1%A2E%8B%16-Z*%C3l%D1%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z*%83%96%D9%A2E%8B%16-Z%B4T%86%D9%A2E%8B%16-Z%B4T%06-%B3E%8B%16-Z%B4%AE%A4%F5%25%C0%00%DE%BF%5C'%0F%DA%B8q%00%00%00%00IEND%AEB%60%82") repeat-y !important;
    border-left: 1px solid #BBBBBB !important;
    border-right: 1px solid #000000 !important;
    border-bottom: 1px dashed #BBBBBB !important;
}

.overflowRulerX > .firebugRulerV {
    left: 0 !important;
}

.overflowRulerY > .firebugRulerH {
    top: 0 !important;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
.fbProxyElement {
    position: fixed !important;
    pointer-events: auto !important;
}
</style></head>

  <body class="index">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="TwoBrains%20API%20Reference_files/navbar.png">
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="TwoBrains%20API%20Reference_files/logo.png">
        <div class="lang-selector">
              <a class="active" href="#" data-language-name="code">code</a>
        </div>
        <div class="search">
          <input class="search" id="input-search" placeholder="Search" type="text">
        </div>
        <ul class="search-results"></ul>
      <div class="tocify" id="toc">
      <ul class="tocify-header" id="tocify-header0"><li data-unique="introduction" class="tocify-item"><a>Introduction</a></li></ul><ul class="tocify-header" id="tocify-header1"><li data-unique="http-requests" class="tocify-item"><a>HTTP requests</a></li><ul style="display: block;" data-tag="2" class="tocify-subheader"><li data-unique="authorization" class="tocify-item"><a>Authorization</a></li><li data-unique="signing-up-a-new-user" class="tocify-item tocify-focus"><a>Signing up a new user</a></li><li data-unique="updating-user-information-and-settings" class="tocify-item"><a>Updating user information and settings</a></li><li data-unique="39-logging-in-39-or-checking-a-users-credentials" class="tocify-item"><a>'Logging in’, or checking a users credentials</a></li><li data-unique="requesting-chatmessages" class="tocify-item"><a>Requesting chatmessages</a></li><li data-unique="sending-chatmessages" class="tocify-item"><a>Sending chatmessages</a></li><li data-unique="requesting-matches" class="tocify-item"><a>Requesting matches</a></li><li data-unique="possible-error-codes" class="tocify-item"><a>Possible error codes</a></li></ul></ul><ul class="tocify-header" id="tocify-header2"><li data-unique="data-objects" class="tocify-item"><a>Data objects</a></li><ul style="" data-tag="2" class="tocify-subheader"><li data-unique="user" class="tocify-item"><a>User</a></li><li data-unique="chatmessage" class="tocify-item"><a>Chatmessage</a></li><li data-unique="match" class="tocify-item"><a>Match</a></li><li data-unique="course" class="tocify-item"><a>Course</a></li><li data-unique="grade" class="tocify-item"><a>Grade</a></li><li data-unique="program" class="tocify-item"><a>Program</a></li><li data-unique="faculty" class="tocify-item"><a>Faculty</a></li></ul></ul></div>
        <ul class="toc-footer">
            <li><a href="mailto:development@twobrains.tempestasludi.com">Contact the developers</a></li>
        </ul>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <div data-unique="introduction" name="introduction"></div><h1 id="introduction">Introduction</h1>

<p>Welcome to the documentation for the TwoBrains Web API! You can use our API to create a fully functional TwoBrains application. </p>

<p>While building this API we followed the RESTful guidelines strictly. 
This resulted in a straight forward web API that uses standard HTTP 
messages. Because of this, our API is completely platform independent. 
You are not limited in any way in creating your TwoBrains application.</p>

<p>A client can get information from the server by doing requests on the
 different endpoints. The server then responds with the requested 
information in JSON format. JSON is the only dataformat used. </p>

<p>We’ll cover all the possible requests a client can do and all 
different objects a client can receive and is expected to send, but 
first we’ll deal with the topic of authorization.</p>

<div data-unique="http-requests" name="http-requests"></div><h1 id="http-requests">HTTP requests</h1>

<aside class="notice">All requests should be done on the same server where this html page is hosted, on port 80.</aside>

<aside class="warning">Whitespace is used only to make the JSON more readable to the programmer. Normally, whitespace in JSON is omitted.</aside>

<div data-unique="authorization" name="authorization"></div><h2 id="authorization">Authorization</h2>

<blockquote>
<p>A http request containing an Authorization field may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>GET /user HTTP/1.1
Authorization: Basic VGVzdFVzZXJuYW1lOlRlc3RQYXNzd29yZA==
Content-Length: 0
Content-Type: text/json
Date: Wed Jan 13 22:18:32 CET 2016
</code></pre>

<blockquote>
<p>When the Authorization field is not supplied, the server responds with a message similar to</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 401 UNAUTHORIZED
Date: Mon, 18 Jan 2016 20:14:15 GMT
Content-Length: 0
WWW-Authenticate: Basic realm="Fake Realm"
Access-Control-Allow-Credentials: true
</code></pre>

<blockquote>
<p>When the Authorization field is supplied, but the username is not known or the password is incorrect</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 401 UNAUTHORIZED
Date: Mon, 18 Jan 2016 20:19:15 GMT
Content-Length: 0
WWW-Authenticate: Basic realm="Fake Realm"
Access-Control-Allow-Credentials: true
</code></pre>

<p>Every single http request must use Basic Authentication. This means 
that every http message must contain a Authorization request-header 
field.</p>

<p>As described on <a href="https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side">Wikipedia</a>:</p>

<p>The Authorization field is constructed as follows:</p>

<ol>
<li><p>Username and password are combined into a string “username:password”.</p></li>
<li><p>The resulting string is then encoded using the RFC2045-MIME variant of Base64, except not limited to 76 char/line.</p></li>
<li><p>The authorization method and a space i.e. “Basic ” is then put before the encoded string.</p></li>
</ol>

<p>This may look as follows:</p>

<p><code class="prettyprint">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></p>

<aside class="warning">If the Authorization field is correct, the server
 will start looking at the request itself and respond with either the 
requested data or a 400 Bad Request.</aside>

<div data-unique="signing-up-a-new-user" name="signing-up-a-new-user"></div><h2 id="signing-up-a-new-user">Signing up a new user</h2>

<blockquote>
<p>A http request to register a new user may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>PUT /user HTTP/1.1
Authorization: Basic VGVzdFVzZXJuYW1lOlRlc3RQYXNzd29yZA==
Content-Length: 162
Content-Type: text/json
Date: Wed Jan 13 22:28:26 CET 2016

{ "gradeList": [ { "grade":"9",
                   "courseId":"TI1216" },
                 { "grade":"10",
                   "courseId":"TI1206" } ],
                 "postalCode":"AndyAntwerpen",
                 "description":"slimme man",
                 "username":"azaidman" }
</code></pre>

<blockquote>
<p>A response after success may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
Date: Mon, 18 Jan 2016 20:27:33 GMT
Content-Length: 0
Access-Control-Allow-Credentials: true
</code></pre>

<blockquote>
<p>A response after failure may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 301 MOVED PERMANENTLY
Location: http://api.tempestasludi.com/user
</code></pre>

<p>To sign up a new user, one has to do a PUT request on /user. The body
 of the request should contain a JSON representation of a user. Also in 
this first message, Basic Authentication is used.</p>

<aside class="notice">If registering a user was succesful, the server 
will respond with a statuscode 200 and a JSON object in the body with a 
boolean field ‘succes’. If not, registering was not succesful.</aside>

<div data-unique="updating-user-information-and-settings" name="updating-user-information-and-settings"></div><h2 id="updating-user-information-and-settings">Updating user information and settings</h2>

<blockquote>
<p>A http request changing user information may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>PUT /user HTTP/1.1
Authorization: Basic VGVzdFVzZXJuYW1lOlRlc3RQYXNzd29yZA==
Content-Length: 162
Content-Type: text/json
Date: Wed Jan 13 22:28:26 CET 2016

{ "gradeList": [ { "grade":"9",
                   "courseId":"TI1216" },
                 { "grade":"10",
                   "courseId":"TI1206" } ],
                 "postalCode":"AndyAntwerpen",
                 "description":"slimme man",
                 "username":"azaidman" }
</code></pre>

<p>Updating user information goes in the same way as signing up a new 
user: one does a PUT request on /user. The body of the message should 
again contain a JSON representation of a user.</p>

<div data-unique="39-logging-in-39-or-checking-a-users-credentials" name="39-logging-in-39-or-checking-a-users-credentials"></div><h2 id="39-logging-in-39-or-checking-a-users-credentials">'Logging in’, or checking a users credentials</h2>

<blockquote>
<p>A http request checking if a user can log in may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>GET /user HTTP/1.1
Authorization: Basic VGVzdFVzZXJuYW1lOlRlc3RQYXNzd29yZA==
Content-Length: 0
Content-Type: text/json
Date: Wed Jan 13 22:18:32 CET 2016
</code></pre>

<p>As this API is RESTful, the server doesn’t know the state of it’s 
clients and treats all message individually. You can still ask the 
server to check the correctness of credentials, however. To do so, one 
simply sends a request to any endpoint, such as /user. The server will 
then check the credentials. If the statuscode of the response is 401 - 
Unauthorized, the credentials are incorrect. If not, the server responds
 with the requested content. The client can ofcourse simply drop the 
body of the received message, as the contents of the message are 
irrelevant.</p>

<div data-unique="requesting-chatmessages" name="requesting-chatmessages"></div><h2 id="requesting-chatmessages">Requesting chatmessages</h2>

<blockquote>
<p>A http request requesting new chatmessages may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>GET /chat HTTP/1.1
Authorization: Basic dXNlcm5hbWUxOnBhc3N3b3Jk
Content-Length: 0
Content-Type: text/json
Date: Mon Jan 18 21:38:40 CET 2016
</code></pre>

<p>To request chatmessages a client does a GET request on /chat. The 
server will then send a JSON representation of all chatmessages to 
client.</p>

<blockquote>
<p>A http response containing chatmessages may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
Date: Mon, 18 Jan 2016 20:27:33 GMT
Content-Length: 247
Content-type: text\json
Access-Control-Allow-Credentials: true

{ "messages": [ { "receiver": "Stefan",
                  "sender":"Andy",
                  "message":"Hoe heeft A1-2 het gedaan?" },
                { "receiver":"Stefan",
                  "sender":"Andy",
                  "message":"Hoe heeft A1-2 het gedaan?" },
                { "receiver":"Stefan",
                  "sender":"Andy",
                  "message":"Hoe heeft A1-2 het gedaan?" } ] }
</code></pre>

<blockquote>
<p>A http response containing no new chatmessages may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
Date: Mon, 18 Jan 2016 20:27:33 GMT
Content-Length: 0
Content-type: text\json
Access-Control-Allow-Credentials: true
</code></pre>

<aside class="notice">A client will probably want to check for new chatmessages regularly, so some form of polling is a logical thing to do.</aside>

<div data-unique="sending-chatmessages" name="sending-chatmessages"></div><h2 id="sending-chatmessages">Sending chatmessages</h2>

<blockquote>
<p>A http request sending a chatmessage may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>PUT /chat HTTP/1.1
Authorization: Basic VGVzdFVzZXJuYW1lOlRlc3RQYXNzd29yZA==
Content-Length: 64
Content-Type: text/json
Date: Wed Jan 13 22:34:29 CET 2016

{"receiver":"Inhoud","sender":"Verzender","message":"Ontvanger"}
</code></pre>

<p>To send a chatmessage a client does a PUT request on /chat. The 
server will then expect a JSON representation of a chatmessage in the 
body of the message.</p>

<div data-unique="requesting-matches" name="requesting-matches"></div><h2 id="requesting-matches">Requesting matches</h2>

<blockquote>
<p>A http request requesting new matches may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>GET /match HTTP/1.1
Authorization: Basic dXNlcm5hbWUxOnBhc3N3b3Jk
Content-Length: 0
Content-Type: text/json
Date: Mon Jan 18 21:41:26 CET 2016
</code></pre>

<p>To request a match which is being made on the server, a client does a
 GET request on /match. The server then responds with a JSON 
representation of matches.</p>

<blockquote>
<p>A http response sending new matches may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
Date: Mon, 18 Jan 2016 20:27:33 GMT
Content-Length: 301
Content-type: text\json
Access-Control-Allow-Credentials: true

[ { "approved":false,
    "matchUsername":"matchUsername",
    "id":45631912,
    "seen":false,
    "username":"username4" },
  { "approved":false,
    "matchUsername":"matchUsername2",
    "id":45631913,
    "seen":false,
    "username":"username3" },
</code></pre>

<blockquote>
<p>A http response containing no new matches may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
Date: Mon, 18 Jan 2016 20:27:33 GMT
Content-Length: 0
Content-type: text\json
Access-Control-Allow-Credentials: true
</code></pre>

<aside class="notice">Requesting new matches may also be done regularly, similar to requesting new chatmessages.</aside>

<div data-unique="possible-error-codes" name="possible-error-codes"></div><h2 id="possible-error-codes">Possible error codes</h2>

<p>The error codes used with this API are standard http error codes. The ones used most are</p>

<table><thead>
<tr>
<th>Error Code</th>
<th>Meaning</th>
</tr>
</thead><tbody>
<tr>
<td>400</td>
<td>Bad Request – Your request sucks</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized – Basic Authentication field is not supplied or is wrong</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden – The endpoint requested is not available/used</td>
</tr>
<tr>
<td>404</td>
<td>Not Found – The requested resource could not be found</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed – You tried to access an invalid method</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable – You requested a format that isn’t json</td>
</tr>
<tr>
<td>410</td>
<td>Gone – The item requested has been removed from our servers</td>
</tr>
<tr>
<td>418</td>
<td>I’m a teapot</td>
</tr>
<tr>
<td>429</td>
<td>Too Many Requests – You’re doing too many requests.</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error – We had a problem with our server. Please try again later.</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable – We’re temporarially offline for maintanance. Please try again later.</td>
</tr>
</tbody></table>

<div data-unique="data-objects" name="data-objects"></div><h1 id="data-objects">Data objects</h1>

<p>All objects are represented in JSON and are sent in the body of a 
http response. Always check the received status code first, then try to 
read the possible JSON data.
</p><aside class="warning">Whitespace is used only to make the JSON more readable to the programmer. Normally, whitespace is omitted.</aside><p></p>

<div data-unique="user" name="user"></div><h2 id="user">User</h2>

<blockquote>
<p>A user object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "gradeList":  [ { "grade":"9",
                    "courseId":"TI1216" },
                  { "grade":"10",
                    "courseId":"TI1206" } ],
  "postalCode": "1234AB",
  "description":"This is my bio.",
  "username":   "azaidman" }
</code></pre>

<p>A user object is used to register a new user on the server and to send/receive preferences and grades for courses.</p>

<div data-unique="chatmessage" name="chatmessage"></div><h2 id="chatmessage">Chatmessage</h2>

<blockquote>
<p>A chatmessage object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "receiver":"Stefan",
  "sender":"Andy",
  "message":"Hoe heeft A1-2 het gedaan?" }
</code></pre>

<div data-unique="match" name="match"></div><h2 id="match">Match</h2>

<blockquote>
<p>A match object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "approved":false,
  "matchUsername":"matchUsername",
  "id":45631912,
  "seen":false,
  "username":"username" }
</code></pre>

<div data-unique="course" name="course"></div><h2 id="course">Course</h2>

<blockquote>
<p>A course object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "name":"OOP Project",
  "id":"TI1216",
  "program":"TI" }
</code></pre>

<div data-unique="grade" name="grade"></div><h2 id="grade">Grade</h2>

<blockquote>
<p>A grade object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "grade":"8",
  "courseId":"TI1216" }
</code></pre>

<div data-unique="program" name="program"></div><h2 id="program">Program</h2>

<blockquote>
<p>A program object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "courses":  [ { "name":"OOP Project",
                  "id":"TI1216",
                  "program":"TI" } ],
  "name":"Technische Informatica",
  "id":"TI",
  "faculty":"EWI" }
</code></pre>

<div data-unique="faculty" name="faculty"></div><h2 id="faculty">Faculty</h2>

<blockquote>
<p>A faculty object represented in JSON may look like</p>
</blockquote>
<pre class="highlight plaintext"><code>{ "name":"Electrical Engineering, Mathematics and Computer Science",
  "id":"EWI",
  "programs": [ { "courses":[ { "name":"OOP Project",
                                "id":"TI1216",
                                "program":"TI" },
                              { "name":"OOP",
                                "id":"TI1206",
                                "program":"TI" } ],
                  "name":"Technische Informatica",
                  "id":"TI",
                  "faculty":"EWI" } ] }
</code></pre>

      </div>
      <div class="dark-box">
          <div class="lang-selector">
                <a class="active" href="#" data-language-name="code">code</a>
          </div>
      </div>
    </div>
  

</body></html>